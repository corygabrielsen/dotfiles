#!/usr/bin/env zsh
#
# The ~/.zshrc file is a configuration file for the Z shell (zsh) that is
# sourced (executed) for interactive shells. It is used to define settings,
# aliases, functions, and keybindings that should be set when you start an
# interactive shell, such as a terminal window.
#
# This file can contain commands, options, and keybindings that produce output
# or modify the shell. It is intended to be used to customize the appearance
# and behavior of the shell, including setting the prompt, defining aliases,
# and setting options.
#
# The ~/.zshrc file is only sourced for interactive shells, and is not sourced
# for login shells or non-login shells. It is not the correct place to set
# environment variables or commands that should be run for all invocations of
# the shell. These should be set in the ~/.zshenv file instead.
#
# To use the ~/.zshrc file, you can create a symlink to the file in your home
# directory using the ln command:
#
#   ln -s path/to/dotfiles/zsh/zshrc ~/.zshrc
#



################################################################################
# Environment Variables
################################################################################

export LANG=en_US.UTF-8

export UID=$(id -u)
export GID=$(id -g)

# editor
export EDITOR=vim
export PAGER=less
export LESS=-R

# gpg
export GPG_TTY=$(tty)

# history
export HISTFILE=~/.zsh_history
export HISTSIZE=16000 # spots for duplicates/uniques
export SAVEHIST=15000 # unique events guaranteed



################################################################################
# Terminal background color
################################################################################
function set_background_color() {
    # Try different methods to get a unique machine identifier
    if [[ -f "/etc/machine-id" ]]; then
        machine_id=$(cat /etc/machine-id)
    elif [[ -f "/var/lib/dbus/machine-id" ]]; then
        machine_id=$(cat /var/lib/dbus/machine-id)
    elif [[ "${OSTYPE}" == "darwin"* ]]; then
        # Use hardware UUID on macOS
        machine_id=$(ioreg -d2 -c IOPlatformExpertDevice | awk -F\" '/IOPlatformUUID/{print $(NF-1)}')
    else
        # Fallback to hostname if no other identifier is available
        machine_id=$(hostname)
    fi

    # Get first digit of md5 hash
    digit=$(echo -n "$machine_id" | md5sum 2>/dev/null || echo -n "$machine_id" | md5 2>/dev/null | tr -d -c 0-9 | cut -c1)

    case "$digit" in
        0) color="#282a36" ;; # Dracula background
        1) color="#2E3440" ;; # Nord Polar Night
        2) color="#1D2021" ;; # Gruvbox dark background
        3) color="#262626" ;; # Base16 grayscale dark
        4) color="#272822" ;; # Monokai background
        5) color="#002b36" ;; # Solarized background
        6) color="#1e1e1e" ;; # Visual Studio Dark Theme
        7) color="#3C3C3C" ;; # Visual Studio 2019 Dark Theme
        8) color="#002240" ;; # Atom One Dark Theme
        9) color="#282C34" ;; # Dark+ (default dark) VSCode
        *) color="#1E1E1E" ;; # default to Visual Studio Dark Theme
    esac
    echo -e "\033]11;$color\007"
}
# Call the function at the end of .zshrc to set the background color whenever a terminal is opened.
export TERMINAL_COLOR=$(set_background_color)
echo -e "\033]11;$TERMINAL_COLOR\007"
# A wrapper for ssh
function ssh() {
    local color_before_ssh=$TERMINAL_COLOR
    /usr/bin/ssh "$@"
    echo -e "\033]11;$color_before_ssh\007"
}



################################################################################
# X Server
#################################################################################
#
# X Server is required for GUI applications to run.
#
# The DISPLAY environment variable is used to specify the X server to connect to.
# The format is host:display.screen, where host is the hostname of the machine
# running the X server, display is the display number, and screen is the screen
# number.
#

if [[ "${OSTYPE}" == "darwin"* ]]; then
    # macOS
    export DISPLAY=$(ipconfig getifaddr en0):0
elif [[ "${OSTYPE}" == "linux-gnu"* ]]; then
    # Linux
    # export DISPLAY=:0
else
    # Unknown.
    export DISPLAY=:0
fi



###############################################################################
# API Keys
###############################################################################
#
# Source the API key file
#

# 1. -v '^#' removes all lines that start with a '#'
# 2. xargs splits the lines into individual arguments
# 3. export takes each argument and exports it as an environment variable
touch $HOME/.api_keys.env
export $(grep -v '^#' $HOME/.api_keys.env | xargs) > /dev/null



###############################################################################
# Aliases
###############################################################################

# file system
alias cp="cp -i"
alias ls="ls -Fh --color"
alias ll="ls -Flv --color"
alias lla="ls -aFlv --color"
alias mv="mv -i"
alias rm="rm -i"

# typo
alias cvd=cd


###############################################################################
# Git aliases
###############################################################################
dirdump() {
    echo "📁 $(pwd)"
    ls --color=auto -Fh --group-directories-first
    echo
}

gst() {
    # check if in a git repo
    # git rev-parse --git-dir 2>/dev/null ||
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        git st
    else
        dirdump
    fi
}

ga() {
    if [ $# -eq 0 ]; then
        # if no args are passed, run `git add .`
        dirdump
    elif [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        # in a git repo so add then run status
        git add "$@"
        # log what was added
        # TODO can enhance when . is passed to print what was added
        for arg in "$@"; do
            echo "➕ $arg"
        done
        echo
        git st
    else
        # not in a git repo so just run ls
        dirdump
    fi
}

# branch
alias gb="git b"
alias gbm="git bm"

# commit
alias gc="git c"
alias gca="git ca"
alias gcm="git cm"
alias gcam="git cam"
alias gcamd="git camd"
alias gacamd="git caamd"
alias gamcamd="git camamd"

# checkout
alias gco="git co"
alias gcob="git cob"

# cherry-pick
alias gcp="git cp"
alias gcpa="git cpa"
alias gcpc="git cpc"
alias gcps="git cps"
alias gcpq="git cpq"

# diff
alias gd="git d"
alias gdc="git dc"
alias gdcc="git dcc"
alias gdh="git dh"
alias gdnr="git dnr"
alias gdw="git dw"
alias gdwnr="git dwnr"

# commons typos for QWERTY users
alias gsdc="git dc"
alias gdcf="git dc"
alias gdcv="git dc"
alias gtdc="git dc"

# fetch
alias gf="git f"

# init
alias gi="git i"

# log
alias gl="git l"
alias gld="git ld"
alias gldag="git ldag"
alias glg="git lg"
alias glga="git lga"
alias glgd="git lgd"
alias gll="git ll"
alias glld="git lld"
alias gls="git ls"

# merge
alias gm="git m"
alias gmc="git mc"

# pull
alias gpl="git pl"

# push
alias gpu="git pu"
alias gpuf="git puf"
alias gpuu="git puu"
alias gpuuf="git puuf"
# typo
alias tgpu="git pu"

# status
alias gss="git ss"
# check if in repo and run ls if not run `git status`
alias gstu="git stu"
alias gstb="git stb"
# typo
alias ghst="git st"
alias gs="git st"
alias gsg="git st"
alias gstg="git st"
alias gsts="git st"
alias gt="git st"
alias gts="git st"

# rebase
alias grb="git rb"
alias grba="git rba"
alias grbc="git rbc"
alias grbi="git rbi"
alias grbi1="git rbi1"
alias grbi2="git rbi2"
alias grbi3="git rbi3"
alias grbi4="git rbi4"
alias grbi5="git rbi5"
alias grbi6="git rbi6"
alias grbi7="git rbi7"
alias grbi8="git rbi8"
alias grbi9="git rbi9"
alias grbi10="git rbi10"
alias grbm="git rbm"
alias grbs="git rbs"

# reset
alias grs="git rs"
alias grh="git rh"
alias grss="git rss"
alias grss1="git rss1"
alias grss2="git rss2"
alias grss3="git rss3"
alias grss4="git rss4"
alias grss5="git rss5"
alias grss6="git rss6"
alias grss7="git rss7"
alias grss8="git rss8"
alias grss9="git rss9"
alias grss10="git rss10"



###############################################################################
# Yarn
###############################################################################

# typos
alias yar="yarn"
alias yanr="yarn"
alias yrn="yarn"

# aliases
alias yb="yarn build"
alias ybt="yarn build && yarn test"
alias yc="yarn clean"
alias ycb="yarn clean && yarn build"
alias ycbt="yarn clean && yarn build && yarn test"
alias yt="yarn test"



###############################################################################
# Sublime Text
###############################################################################

# Run Sublime Text in another session
alias subl="setsid subl"



###############################################################################
# ANSI color codes
###############################################################################

RED="\033[0;31m"
BRIGHT_RED="\033[1;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
YELLOWISH="\033[38;5;220m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"
ENDC="\033[0m"
NC="\033[0m"
# 256 colors
# https://jonasjacek.github.io/colors/
ORANGE="\033[38;5;166m"
PURPLE="\033[38;5;141m"
PINK="\033[38;5;217m"
BROWN="\033[38;5;130m"
LIME="\033[38;5;154m"
BRIGHT_GREEN="\033[38;5;118m"
TURQUOISE="\033[38;5;45m"
LIGHT_BLUE="\033[38;5;39m"
DARK_GRAY="\033[38;5;59m"



###############################################################################
# Options that enable or disable shell behavior:
###############################################################################

# Save command history with timestamps and duration
setopt extended_history

# Incrementally add new history lines
setopt inc_append_history

# Expire duplicates first when history is full
setopt hist_expire_dups_first

# Verify history expansion rather than executing immediately
setopt hist_verify

# Share history between all instances of the shell
setopt share_history

# Don't automatically change directories when entering a directory name
unsetopt autocd



###############################################################################
# Options that enable or disable shell prompts:
###############################################################################

# Enable prompt string substitution
setopt PROMPT_SUBST

#
# Options that enable or disable shell features:
#

# Enable spelling correction for commands
# setopt correct

# Enable automatic cd to directories without typing "cd"
# setopt autocd

#
# Options that control the history file:
#

# Append new history lines rather than replacing existing ones
# setopt hist_append

# Append history immediately rather than waiting until the session is terminated
# setopt immediate_history

# Don't save command history with timestamps and duration
# unsetopt extended_history

# Don't incrementally add new history lines
# unsetopt inc_append_history

# Don't expire duplicates first when history is full
# unsetopt hist_expire_dups_first

# Execute history expansion immediately rather than verifying first
# unsetopt hist_verify

# Don't share history between instances of the shell
# unsetopt share_history

# Disable prompt string substitution
# unsetopt PROMPT_SUBST



###############################################################################
# Configuring bindkey Utility
###############################################################################

# Set default command line editing mode to vi
# set editing-mode vi

# Set default keymap to vi-command
# set keymap vi-command

# Set bindkey utility to operate in vi command mode
bindkey -v

# Set key binding for Ctrl-Y to yank (copy) rest of line in vi insert mode
# bindkey -M viins '^Y' vi-yank-eol

# Set key binding for Ctrl-L to clear screen
# bindkey '^L' clear-screen

# Set key binding for Ctrl-D to delete character under cursor
# bindkey '^D' delete-char

# Set key binding for Ctrl-W to delete previous word
# bindkey '^W' backward-kill-word

# Set key binding for Ctrl-R to perform incremental search backward through command history
bindkey '^R' history-incremental-search-backward



###############################################################################
# PS1 prompt
###############################################################################
#
# PS1 controls the prompt. It is set in zshrc since it is only sourced in
# interactive shells.
#

# Display the current git branch
parse_git_branch() {
    local branch_name="$(git symbolic-ref HEAD 2>/dev/null | sed 's|refs/heads/||')"
    if [ ! "${branch_name}" ]; then
        local git_sha="$(git rev-parse --short HEAD)"
        echo "%{$BRIGHT_RED%}(${git_sha})%{$ENDC%}"
    else
        if [ "${branch_name}" = "master" ]; then
            echo "%{$MAGENTA%}(${branch_name})%{$ENDC%}"
        else
            echo "%{$PURPLE%}(${branch_name})%{$ENDC%}"
        fi
    fi
}

# Display information about any uncommitted changes in the current git repository
parse_git_changes() {
    local num_untracked_files="$(git ls-files --others --exclude-standard | wc -l)"
    local num_modified_files="$(git diff --name-only | wc -l)"
    local num_deleted_files="$(git diff --diff-filter=D --name-only | wc -l)"
    local num_added_files="$(git diff --cached --name-only | wc -l)"
    if [ "${num_added_files}" -gt 0 ]; then
        echo -n "%{$BRIGHT_GREEN%}+${num_added_files}%{$ENDC%}"
    fi
    if [ "${num_untracked_files}" -gt 0 ]; then
        echo -n "%{$CYAN%}+${num_untracked_files}%{$ENDC%}"
    fi
    if [ "${num_modified_files}" -gt 0 ]; then
        echo -n "%{$YELLOWISH%}~${num_modified_files}%{$ENDC%}"
    fi
}

# Display the current git branch and any uncommitted changes
parse_git() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        # We are not in a Git repository
        return
    fi
    local branch="$(parse_git_branch)"
    local changes="$(parse_git_changes)"
    if [ "${branch}" ] || [ "${changes}" ]; then
        echo -n " ${branch}${changes}"
    fi
}

# Function to determine whether the current user is root
parse_command_prompt() {
  if [[ $EUID -eq 0 ]]; then
    # Root user
    echo "%{$BRIGHT_RED%}#%{$ENDC%}"
  else
    # Non-root user
    echo "%{$WHITE%}$%{$ENDC%}"
  fi
}

# Format the home directory for display in the prompt
format_homedir() {
    local dir="${PWD}"
    local home="${HOME}"
    local home_len=${#home}
    local dir_len=${#dir}
    if [[ "${dir}" == "${HOME}" ]]; then
        # Current working directory is home
        echo -n "%{$BLUE%}~%{$ENDC%}"
    elif [[ "${dir}" == "${HOME}/"* ]]; then
        # Current working directory is subdirectory of home
        echo -n "%{$LIME%}~%{$ENDC%}%{$TURQUOISE%}${dir:$home_len}%{$ENDC%}"
    else
        # Current working directory is outside of home
        echo -n "%{$ORANGE%}$dir%{$ENDC%}"
    fi
}

# Set the prompt
PS1='$(format_homedir)$(parse_git) $(parse_command_prompt) '



################################################################################
# pyenv
################################################################################
#
# This is the recommended way to set up Pyenv in your shell.
#
# bash
# https://github.com/pyenv/pyenv/issues/1906#issuecomment-835027647
#
# zsh
# https://github.com/pyenv/pyenv/issues/1906#issuecomment-839556656
#
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi



###############################################################################
# Custom functions
###############################################################################

# Copy standard input to clipboard and display on terminal.
ctrlc() {
    tee >(xclip -sel clip) "$@" && echo "\n📋 Copied to clipboard"
}
cntrlc() {
    ctrlc
}

# Trim trailing whitespace
ttws()
    cat $1 | sed -e 's/[[:blank:]]*$//'

# Extract file
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      rar x $1        ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


# 1. Find all files and directories under the current directory, sorted alphabetically
# 2. Replace the "." with the basename of the current directory
# 3. Append a "/" to the end of each directory name
dump() {
  find . -type f -o -type d |
  sort |
  awk '{
    # If the line ends in "/", print the line with a "/" appended
    if (system("[ -d \"" $1 "\" ]") == 0) {
      print $1 "/"
    }
    # If the line does not end in "/", print the line with a "?" appended
    else {
      print $1 ""
    }
  }' |
  sed "s|^\.|$(basename "$(pwd)")|"
}

srcdump() {
  dump |
  grep -vE "(.git|.next|build|cache|coverage|dist|log|logs|node_modules|out|site|tmp|venv)"
}


################################################################################
# tmux
################################################################################
#
# tmux is a terminal multiplexer. It lets you switch easily between several
# programs in one terminal, detach them (they keep running in the background)
# and reattach them to a different terminal.
#
if [ -z "${TMUX}" ]; then
    export PATH=/usr/bin:${HOME}/bin:/usr/local/bin:${PATH}
fi



################################################################################
# go
################################################################################
#
# https://golang.org/doc/install#install
#
# Go lives in /usr/local/go
#
if [ -d /usr/local/go ]; then
    export PATH=${PATH}:/usr/local/go/bin
    export GOPATH=${HOME}/go
fi

################################################################################
# rust
################################################################################
#
# Rust toolchain and related tools
#

# Source cargo environment if it exists
if [[ -f "$HOME/.cargo/env" ]]; then
    . "$HOME/.cargo/env"
fi

# Add foundry to PATH if it exists
# Check common installation paths across different systems
for foundry_path in "$HOME/.foundry/bin" "/usr/local/foundry/bin"; do
    if [[ -d "$foundry_path" ]]; then
        export PATH="$PATH:$foundry_path"
        break
    fi
done

################################################################################
# nvm
################################################################################
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


################################################################################
# User-specific binaries and scripts
################################################################################
#
# ~/.local/bin is the standard location for user-specific executables and scripts
# following the XDG Base Directory Specification. This directory is meant for
# binaries and scripts that should only be available to the current user.
#
if [[ -f "$HOME/.local/bin/env" ]]; then
    . "$HOME/.local/bin/env"
fi
